{"version":3,"sources":["notes/notes.ts","notes/intervals.ts","notes/scaler.ts","notes/scales.ts","views/string.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Notes","Intervals","NoteNames","A","A_sharp","B","C","C_sharp","D","D_sharp","E","F","F_sharp","G","G_sharp","AllNotes","applyInterval","rootNote","interval","noteIntex","indexOf","length","Scaler","scaleConfig","reduce","scale","currentInterval","index","AllScales","name","step","halfStep","GuitarString","props","frets","createFrets","className","this","note","map","fretNote","key","isActive","notesInScale","includes","isRoot","currentNote","i","newNote","push","React","GuitarFret","activeClassName","rootClassName","GuitarNeckFretNumbers","GuitarNeck","allowedNotes","App","onRootNoteChange","event","setState","Number","target","value","onScaleChange","scaleInfo","find","state","createScale","id","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.862a8be4.chunk.js","sourcesContent":["export enum Notes {\n    A,\n    A_sharp,\n    B,\n    C,\n    C_sharp,\n    D,\n    D_sharp,\n    E,\n    F,\n    F_sharp,\n    G,\n    G_sharp,\n}\n\nexport const NoteNames: { [key in Notes]: string } = {\n    [Notes.A]: \"A\",\n    [Notes.A_sharp]: \"A#\",\n    [Notes.B]: \"B\",\n    [Notes.C]: \"C\",\n    [Notes.C_sharp]: \"C#\",\n    [Notes.D]: \"D\",\n    [Notes.D_sharp]: \"D#\",\n    [Notes.E]: \"E\",\n    [Notes.F]: \"F\",\n    [Notes.F_sharp]: \"F#\",\n    [Notes.G]: \"G\",\n    [Notes.G_sharp]: \"G#\",\n};\n\nexport const AllNotes = [\n    Notes.A,\n    Notes.A_sharp,\n    Notes.B,\n    Notes.C,\n    Notes.C_sharp,\n    Notes.D,\n    Notes.D_sharp,\n    Notes.E,\n    Notes.F,\n    Notes.F_sharp,\n    Notes.G,\n    Notes.G_sharp,\n];\n","import {AllNotes, Notes} from \"./notes\";\n\nexport enum Intervals {\n    unison,\n    halfStep,\n    step,\n    minorThird,\n    majorThird,\n    fourth,\n    tritone,\n    fifth,\n    minorSixth,\n    majorSixth,\n    minorSeventh,\n    majorSeventh,\n    octave,\n}\n\nexport function applyInterval(rootNote: Notes, interval: number) {\n    const noteIntex = AllNotes.indexOf(rootNote);\n    return AllNotes[(noteIntex + interval) % AllNotes.length];\n}\n","import {applyInterval} from \"./intervals\";\nimport {Notes} from \"./notes\";\n\nexport type ScaleConfig = Array<number>;\nexport type Scale = Array<Notes>;\n\nexport class Scaler {\n    static createScale(rootNote: Notes, scaleConfig: ScaleConfig): Scale {\n        return scaleConfig.reduce((scale, currentInterval, index) => {\n            return [\n                ...scale,\n                applyInterval(scale[index], currentInterval),\n            ]\n        }, [rootNote]);\n    }\n}\n","import {Intervals} from \"./intervals\";\n\nexport const MinorScale: Array<Intervals> = [\n    Intervals.step,\n    Intervals.halfStep,\n    Intervals.step,\n    Intervals.step,\n    Intervals.halfStep,\n    Intervals.step,\n];\n\nexport const MajorScale: Array<Intervals> = [\n    Intervals.step,\n    Intervals.step,\n    Intervals.halfStep,\n    Intervals.step,\n    Intervals.step,\n    Intervals.step,\n];\n\nexport interface ScaleInfo {\n    name: string;\n    scale: Array<Intervals>;\n}\n\nexport const AllScales: Array<ScaleInfo> = [\n    {\n        name: \"Minor\",\n        scale: MinorScale,\n    },\n    {\n        name: \"Major\",\n        scale: MajorScale,\n    },\n];\n","import * as React from \"react\";\nimport {applyInterval, Intervals} from \"../notes/intervals\";\nimport {NoteNames, Notes} from \"../notes/notes\";\n\ninterface NoteProps {\n    note: Notes;\n}\n\ninterface GuitarStringProps extends NoteProps {\n    notesInScale: Array<Notes>;\n}\n\nexport class GuitarString extends React.PureComponent<GuitarStringProps, {}> {\n    private frets: Array<Notes>;\n\n    constructor(props: GuitarStringProps) {\n        super(props);\n        this.frets = this.createFrets();\n    }\n\n\n    render() {\n        return <div className=\"p-string\">\n            <div className=\"p-string-note\">{NoteNames[this.props.note]}</div>\n            <div className=\"p-string__frets\">\n                {this.frets.map(fretNote => {\n                    return <GuitarFret note={fretNote}\n                                       key={fretNote}\n                                       isActive={this.props.notesInScale.includes(fretNote)}\n                                       isRoot={this.props.notesInScale[0] === fretNote}\n                    />\n                })}\n            </div>\n        </div>;\n    }\n\n    private createFrets(): Array<Notes> {\n        const frets: Array<Notes> = [];\n        let currentNote = this.props.note;\n        for (let i = 0; i < 12; i++) {\n            let newNote = applyInterval(currentNote, Intervals.halfStep);\n            frets.push(newNote);\n            currentNote = newNote;\n        }\n        return frets;\n    }\n}\n\ninterface GuitarFretsProps extends NoteProps {\n    isActive: boolean;\n    isRoot: boolean;\n}\n\nexport class GuitarFret extends React.PureComponent<GuitarFretsProps, {}> {\n    render() {\n        const activeClassName = this.props.isActive ? \"p-fret--active\" : \"\";\n        const rootClassName = this.props.isRoot ? \"p-fret--root\" : \"\";\n        return <div className={`p-fret ${activeClassName} ${rootClassName}`}/>\n    }\n}\n\nexport function GuitarNeckFretNumbers() {\n    return <div className=\"p-string\">\n        <div className=\"p-string-note\"></div>\n        <div className=\"p-string__frets\">\n            <div className=\"p-fake-fret\">1</div>\n            <div className=\"p-fake-fret\"/>\n            <div className=\"p-fake-fret\">3</div>\n            <div className=\"p-fake-fret\"/>\n            <div className=\"p-fake-fret\">5</div>\n            <div className=\"p-fake-fret\"/>\n            <div className=\"p-fake-fret\">7</div>\n            <div className=\"p-fake-fret\"/>\n            <div className=\"p-fake-fret\">9</div>\n            <div className=\"p-fake-fret\"/>\n            <div className=\"p-fake-fret\"/>\n            <div className=\"p-fake-fret\">12</div>\n        </div>\n    </div>\n}\n","import React, {ChangeEvent} from \"react\";\nimport \"./App.scss\";\nimport {AllNotes, NoteNames, Notes} from \"./notes/notes\";\nimport {Scaler} from \"./notes/scaler\";\nimport {AllScales, ScaleInfo} from \"./notes/scales\";\nimport {GuitarNeckFretNumbers, GuitarString} from \"./views/string\";\n\nclass App extends React.Component<{}, { scaleInfo: ScaleInfo, rootNote: Notes }> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            scaleInfo: AllScales[0],\n            rootNote: Notes.A,\n        };\n    }\n\n    private onRootNoteChange = (event: ChangeEvent<HTMLSelectElement>) => {\n        this.setState({\n            rootNote: Number(event.target.value),\n        });\n    };\n\n    private onScaleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n        this.setState({\n            scaleInfo: AllScales.find(scale => scale.name === event.target.value) || AllScales[0],\n        });\n    };\n\n    render() {\n        const allowedNotes = Scaler.createScale(this.state.rootNote, this.state.scaleInfo.scale);\n        return (\n            <div className=\"App\">\n                <GuitarNeck allowedNotes={allowedNotes}/>\n                <select name=\"root-note\"\n                        id=\"root-note\"\n                        value={this.state.rootNote}\n                        onChange={this.onRootNoteChange}>\n                    {AllNotes.map(note => {\n                        return <option value={note}\n                                       key={note}>\n                            {NoteNames[note]}\n                        </option>;\n                    })}\n                </select>\n                <select name=\"scale\"\n                        id=\"scale\"\n                        value={this.state.scaleInfo.name}\n                        onChange={this.onScaleChange}>\n                    {AllScales.map((scaleInfo) => {\n                        return <option value={scaleInfo.name}\n                                       key={scaleInfo.name}>\n                            {scaleInfo.name}\n                        </option>;\n                    })}\n                </select>\n            </div>\n        );\n    }\n}\n\nexport function GuitarNeck(props: { allowedNotes: Array<Notes> }) {\n    return <div className=\"p-neck\">\n        <GuitarString note={Notes.E} notesInScale={props.allowedNotes}/>\n        <GuitarString note={Notes.B} notesInScale={props.allowedNotes}/>\n        <GuitarString note={Notes.G} notesInScale={props.allowedNotes}/>\n        <GuitarString note={Notes.D} notesInScale={props.allowedNotes}/>\n        <GuitarString note={Notes.A} notesInScale={props.allowedNotes}/>\n        <GuitarString note={Notes.E} notesInScale={props.allowedNotes}/>\n        <GuitarNeckFretNumbers/>\n    </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}